package backtype.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
<<<<<<< MINE
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-5-14")
=======
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-3")
>>>>>>> YOURS
public class Assignment implements org.apache.thrift.TBase<Assignment, Assignment._Fields>, java.io.Serializable, Cloneable, Comparable<Assignment> {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Assignment");

    private static final org.apache.thrift.protocol.TField MASTER_CODE_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("master_code_dir", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final org.apache.thrift.protocol.TField NODE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("node_host", org.apache.thrift.protocol.TType.MAP, (short) 2);

    private static final org.apache.thrift.protocol.TField EXECUTOR_NODE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_node_port", org.apache.thrift.protocol.TType.MAP, (short) 3);

    private static final org.apache.thrift.protocol.TField EXECUTOR_START_TIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_start_time_secs", org.apache.thrift.protocol.TType.MAP, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new AssignmentStandardSchemeFactory());
        schemes.put(TupleScheme.class, new AssignmentTupleSchemeFactory());
    }

    private String master_code_dir;

    private Map<String, String> node_host;

    private Map<List<Long>, NodeInfo> executor_node_port;

    private Map<List<Long>, Long> executor_start_time_secs;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        MASTER_CODE_DIR((short) 1, "master_code_dir"), NODE_HOST((short) 2, "node_host"), EXECUTOR_NODE_PORT((short) 3, "executor_node_port"), EXECUTOR_START_TIME_SECS((short) 4, "executor_start_time_secs");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1:
                    return MASTER_CODE_DIR;
                case 2:
                    return NODE_HOST;
                case 3:
                    return EXECUTOR_NODE_PORT;
                case 4:
                    return EXECUTOR_START_TIME_SECS;
                default:
                    return null;
            }
        }

        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static final _Fields[] optionals = { _Fields.NODE_HOST, _Fields.EXECUTOR_NODE_PORT, _Fields.EXECUTOR_START_TIME_SECS };

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.MASTER_CODE_DIR, new org.apache.thrift.meta_data.FieldMetaData("master_code_dir", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NODE_HOST, new org.apache.thrift.meta_data.FieldMetaData("node_host", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.EXECUTOR_NODE_PORT, new org.apache.thrift.meta_data.FieldMetaData("executor_node_port", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)), new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class))));
        tmpMap.put(_Fields.EXECUTOR_START_TIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("executor_start_time_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)), new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Assignment.class, metaDataMap);
    }

    public Assignment() {
        this.node_host = new HashMap<String, String>();
        this.executor_node_port = new HashMap<List<Long>, NodeInfo>();
        this.executor_start_time_secs = new HashMap<List<Long>, Long>();
    }

    public Assignment(String master_code_dir) {
        this();
        this.master_code_dir = master_code_dir;
    }

    public Assignment(Assignment other) {
        if (other.is_set_master_code_dir()) {
            this.master_code_dir = other.master_code_dir;
        }
        if (other.is_set_node_host()) {
            Map<String, String> __this__node_host = new HashMap<String, String>(other.node_host);
            this.node_host = __this__node_host;
        }
        if (other.is_set_executor_node_port()) {
            Map<List<Long>, NodeInfo> __this__executor_node_port = new HashMap<List<Long>, NodeInfo>(other.executor_node_port.size());
            for (Map.Entry<List<Long>, NodeInfo> other_element : other.executor_node_port.entrySet()) {
                List<Long> other_element_key = other_element.getKey();
                NodeInfo other_element_value = other_element.getValue();
                List<Long> __this__executor_node_port_copy_key = new ArrayList<Long>(other_element_key);
                NodeInfo __this__executor_node_port_copy_value = new NodeInfo(other_element_value);
                __this__executor_node_port.put(__this__executor_node_port_copy_key, __this__executor_node_port_copy_value);
            }
            this.executor_node_port = __this__executor_node_port;
        }
        if (other.is_set_executor_start_time_secs()) {
            Map<List<Long>, Long> __this__executor_start_time_secs = new HashMap<List<Long>, Long>(other.executor_start_time_secs.size());
            for (Map.Entry<List<Long>, Long> other_element : other.executor_start_time_secs.entrySet()) {
                List<Long> other_element_key = other_element.getKey();
                Long other_element_value = other_element.getValue();
                List<Long> __this__executor_start_time_secs_copy_key = new ArrayList<Long>(other_element_key);
                Long __this__executor_start_time_secs_copy_value = other_element_value;
                __this__executor_start_time_secs.put(__this__executor_start_time_secs_copy_key, __this__executor_start_time_secs_copy_value);
            }
            this.executor_start_time_secs = __this__executor_start_time_secs;
        }
    }

    public Assignment deepCopy() {
        return new Assignment(this);
    }

    @Override
    public void clear() {
        this.master_code_dir = null;
        this.node_host = new HashMap<String, String>();
        this.executor_node_port = new HashMap<List<Long>, NodeInfo>();
        this.executor_start_time_secs = new HashMap<List<Long>, Long>();
    }

    public String get_master_code_dir() {
        return this.master_code_dir;
    }

    public void set_master_code_dir(String master_code_dir) {
        this.master_code_dir = master_code_dir;
    }

    public void unset_master_code_dir() {
        this.master_code_dir = null;
    }

    public boolean is_set_master_code_dir() {
        return this.master_code_dir != null;
    }

    public void set_master_code_dir_isSet(boolean value) {
        if (!value) {
            this.master_code_dir = null;
        }
    }

    public int get_node_host_size() {
        return (this.node_host == null) ? 0 : this.node_host.size();
    }

    public void put_to_node_host(String key, String val) {
        if (this.node_host == null) {
            this.node_host = new HashMap<String, String>();
        }
        this.node_host.put(key, val);
    }

    public Map<String, String> get_node_host() {
        return this.node_host;
    }

    public void set_node_host(Map<String, String> node_host) {
        this.node_host = node_host;
    }

    public void unset_node_host() {
        this.node_host = null;
    }

    public boolean is_set_node_host() {
        return this.node_host != null;
    }

    public void set_node_host_isSet(boolean value) {
        if (!value) {
            this.node_host = null;
        }
    }

    public int get_executor_node_port_size() {
        return (this.executor_node_port == null) ? 0 : this.executor_node_port.size();
    }

    public void put_to_executor_node_port(List<Long> key, NodeInfo val) {
        if (this.executor_node_port == null) {
            this.executor_node_port = new HashMap<List<Long>, NodeInfo>();
        }
        this.executor_node_port.put(key, val);
    }

    public Map<List<Long>, NodeInfo> get_executor_node_port() {
        return this.executor_node_port;
    }

    public void set_executor_node_port(Map<List<Long>, NodeInfo> executor_node_port) {
        this.executor_node_port = executor_node_port;
    }

    public void unset_executor_node_port() {
        this.executor_node_port = null;
    }

    public boolean is_set_executor_node_port() {
        return this.executor_node_port != null;
    }

    public void set_executor_node_port_isSet(boolean value) {
        if (!value) {
            this.executor_node_port = null;
        }
    }

    public int get_executor_start_time_secs_size() {
        return (this.executor_start_time_secs == null) ? 0 : this.executor_start_time_secs.size();
    }

    public void put_to_executor_start_time_secs(List<Long> key, long val) {
        if (this.executor_start_time_secs == null) {
            this.executor_start_time_secs = new HashMap<List<Long>, Long>();
        }
        this.executor_start_time_secs.put(key, val);
    }

    public Map<List<Long>, Long> get_executor_start_time_secs() {
        return this.executor_start_time_secs;
    }

    public void set_executor_start_time_secs(Map<List<Long>, Long> executor_start_time_secs) {
        this.executor_start_time_secs = executor_start_time_secs;
    }

    public void unset_executor_start_time_secs() {
        this.executor_start_time_secs = null;
    }

    public boolean is_set_executor_start_time_secs() {
        return this.executor_start_time_secs != null;
    }

    public void set_executor_start_time_secs_isSet(boolean value) {
        if (!value) {
            this.executor_start_time_secs = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case MASTER_CODE_DIR:
                if (value == null) {
                    unset_master_code_dir();
                } else {
                    set_master_code_dir((String) value);
                }
                break;
            case NODE_HOST:
                if (value == null) {
                    unset_node_host();
                } else {
                    set_node_host((Map<String, String>) value);
                }
                break;
            case EXECUTOR_NODE_PORT:
                if (value == null) {
                    unset_executor_node_port();
                } else {
                    set_executor_node_port((Map<List<Long>, NodeInfo>) value);
                }
                break;
            case EXECUTOR_START_TIME_SECS:
                if (value == null) {
                    unset_executor_start_time_secs();
                } else {
                    set_executor_start_time_secs((Map<List<Long>, Long>) value);
                }
                break;
        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case MASTER_CODE_DIR:
                return get_master_code_dir();
            case NODE_HOST:
                return get_node_host();
            case EXECUTOR_NODE_PORT:
                return get_executor_node_port();
            case EXECUTOR_START_TIME_SECS:
                return get_executor_start_time_secs();
        }
        throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }
        switch(field) {
            case MASTER_CODE_DIR:
                return is_set_master_code_dir();
            case NODE_HOST:
                return is_set_node_host();
            case EXECUTOR_NODE_PORT:
                return is_set_executor_node_port();
            case EXECUTOR_START_TIME_SECS:
                return is_set_executor_start_time_secs();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Assignment)
            return this.equals((Assignment) that);
        return false;
    }

    public boolean equals(Assignment that) {
        if (that == null)
            return false;
        boolean this_present_master_code_dir = true && this.is_set_master_code_dir();
        boolean that_present_master_code_dir = true && that.is_set_master_code_dir();
        if (this_present_master_code_dir || that_present_master_code_dir) {
            if (!(this_present_master_code_dir && that_present_master_code_dir))
                return false;
            if (!this.master_code_dir.equals(that.master_code_dir))
                return false;
        }
        boolean this_present_node_host = true && this.is_set_node_host();
        boolean that_present_node_host = true && that.is_set_node_host();
        if (this_present_node_host || that_present_node_host) {
            if (!(this_present_node_host && that_present_node_host))
                return false;
            if (!this.node_host.equals(that.node_host))
                return false;
        }
        boolean this_present_executor_node_port = true && this.is_set_executor_node_port();
        boolean that_present_executor_node_port = true && that.is_set_executor_node_port();
        if (this_present_executor_node_port || that_present_executor_node_port) {
            if (!(this_present_executor_node_port && that_present_executor_node_port))
                return false;
            if (!this.executor_node_port.equals(that.executor_node_port))
                return false;
        }
        boolean this_present_executor_start_time_secs = true && this.is_set_executor_start_time_secs();
        boolean that_present_executor_start_time_secs = true && that.is_set_executor_start_time_secs();
        if (this_present_executor_start_time_secs || that_present_executor_start_time_secs) {
            if (!(this_present_executor_start_time_secs && that_present_executor_start_time_secs))
                return false;
            if (!this.executor_start_time_secs.equals(that.executor_start_time_secs))
                return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();
        boolean present_master_code_dir = true && (is_set_master_code_dir());
        list.add(present_master_code_dir);
        if (present_master_code_dir)
            list.add(master_code_dir);
        boolean present_node_host = true && (is_set_node_host());
        list.add(present_node_host);
        if (present_node_host)
            list.add(node_host);
        boolean present_executor_node_port = true && (is_set_executor_node_port());
        list.add(present_executor_node_port);
        if (present_executor_node_port)
            list.add(executor_node_port);
        boolean present_executor_start_time_secs = true && (is_set_executor_start_time_secs());
        list.add(present_executor_start_time_secs);
        if (present_executor_start_time_secs)
            list.add(executor_start_time_secs);
        return list.hashCode();
    }

    @Override
    public int compareTo(Assignment other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }
        int lastComparison = 0;
        lastComparison = Boolean.valueOf(is_set_master_code_dir()).compareTo(other.is_set_master_code_dir());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_master_code_dir()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.master_code_dir, other.master_code_dir);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_node_host()).compareTo(other.is_set_node_host());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_node_host()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_host, other.node_host);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_executor_node_port()).compareTo(other.is_set_executor_node_port());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_executor_node_port()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_node_port, other.executor_node_port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_executor_start_time_secs()).compareTo(other.is_set_executor_start_time_secs());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_executor_start_time_secs()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_start_time_secs, other.executor_start_time_secs);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Assignment(");
        boolean first = true;
        sb.append("master_code_dir:");
        if (this.master_code_dir == null) {
            sb.append("null");
        } else {
            sb.append(this.master_code_dir);
        }
        first = false;
        if (is_set_node_host()) {
            if (!first)
                sb.append(", ");
            sb.append("node_host:");
            if (this.node_host == null) {
                sb.append("null");
            } else {
                sb.append(this.node_host);
            }
            first = false;
        }
        if (is_set_executor_node_port()) {
            if (!first)
                sb.append(", ");
            sb.append("executor_node_port:");
            if (this.executor_node_port == null) {
                sb.append("null");
            } else {
                sb.append(this.executor_node_port);
            }
            first = false;
        }
        if (is_set_executor_start_time_secs()) {
            if (!first)
                sb.append(", ");
            sb.append("executor_start_time_secs:");
            if (this.executor_start_time_secs == null) {
                sb.append("null");
            } else {
                sb.append(this.executor_start_time_secs);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        if (!is_set_master_code_dir()) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'master_code_dir' is unset! Struct:" + toString());
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class AssignmentStandardSchemeFactory implements SchemeFactory {

        public AssignmentStandardScheme getScheme() {
            return new AssignmentStandardScheme();
        }
    }

    private static class AssignmentStandardScheme extends StandardScheme<Assignment> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Assignment struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch(schemeField.id) {
                    case 1:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.master_code_dir = iprot.readString();
                            struct.set_master_code_dir_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2:
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
<<<<<<< MINE
                                org.apache.thrift.protocol.TMap _map486 = iprot.readMapBegin();
                                struct.node_host = new HashMap<String, String>(2 * _map486.size);
                                String _key487;
                                String _val488;
                                for (int _i489 = 0; _i489 < _map486.size; ++_i489) {
                                    _key487 = iprot.readString();
                                    _val488 = iprot.readString();
                                    struct.node_host.put(_key487, _val488);
=======
                                org.apache.thrift.protocol.TMap _map388 = iprot.readMapBegin();
                                struct.node_host = new HashMap<String, String>(2 * _map388.size);
                                String _key389;
                                String _val390;
                                for (int _i391 = 0; _i391 < _map388.size; ++_i391) {
                                    _key389 = iprot.readString();
                                    _val390 = iprot.readString();
                                    struct.node_host.put(_key389, _val390);
>>>>>>> YOURS
                                }
                                iprot.readMapEnd();
                            }
                            struct.set_node_host_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3:
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
<<<<<<< MINE
                                org.apache.thrift.protocol.TMap _map490 = iprot.readMapBegin();
                                struct.executor_node_port = new HashMap<List<Long>, NodeInfo>(2 * _map490.size);
                                List<Long> _key491;
                                NodeInfo _val492;
                                for (int _i493 = 0; _i493 < _map490.size; ++_i493) {
=======
                                org.apache.thrift.protocol.TMap _map392 = iprot.readMapBegin();
                                struct.executor_node_port = new HashMap<List<Long>, NodeInfo>(2 * _map392.size);
                                List<Long> _key393;
                                NodeInfo _val394;
                                for (int _i395 = 0; _i395 < _map392.size; ++_i395) {
>>>>>>> YOURS
                                    {
<<<<<<< MINE
                                        org.apache.thrift.protocol.TList _list494 = iprot.readListBegin();
                                        _key491 = new ArrayList<Long>(_list494.size);
                                        long _elem495;
                                        for (int _i496 = 0; _i496 < _list494.size; ++_i496) {
                                            _elem495 = iprot.readI64();
                                            _key491.add(_elem495);
=======
                                        org.apache.thrift.protocol.TList _list396 = iprot.readListBegin();
                                        _key393 = new ArrayList<Long>(_list396.size);
                                        long _elem397;
                                        for (int _i398 = 0; _i398 < _list396.size; ++_i398) {
                                            _elem397 = iprot.readI64();
                                            _key393.add(_elem397);
>>>>>>> YOURS
                                        }
                                        iprot.readListEnd();
                                    }
<<<<<<< MINE
                                    _val492 = new NodeInfo();
                                    _val492.read(iprot);
                                    struct.executor_node_port.put(_key491, _val492);
=======
                                    _val394 = new NodeInfo();
                                    _val394.read(iprot);
                                    struct.executor_node_port.put(_key393, _val394);
>>>>>>> YOURS
                                }
                                iprot.readMapEnd();
                            }
                            struct.set_executor_node_port_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4:
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
<<<<<<< MINE
                                org.apache.thrift.protocol.TMap _map497 = iprot.readMapBegin();
                                struct.executor_start_time_secs = new HashMap<List<Long>, Long>(2 * _map497.size);
                                List<Long> _key498;
                                long _val499;
                                for (int _i500 = 0; _i500 < _map497.size; ++_i500) {
=======
                                org.apache.thrift.protocol.TMap _map399 = iprot.readMapBegin();
                                struct.executor_start_time_secs = new HashMap<List<Long>, Long>(2 * _map399.size);
                                List<Long> _key400;
                                long _val401;
                                for (int _i402 = 0; _i402 < _map399.size; ++_i402) {
>>>>>>> YOURS
                                    {
<<<<<<< MINE
                                        org.apache.thrift.protocol.TList _list501 = iprot.readListBegin();
                                        _key498 = new ArrayList<Long>(_list501.size);
                                        long _elem502;
                                        for (int _i503 = 0; _i503 < _list501.size; ++_i503) {
                                            _elem502 = iprot.readI64();
                                            _key498.add(_elem502);
=======
                                        org.apache.thrift.protocol.TList _list403 = iprot.readListBegin();
                                        _key400 = new ArrayList<Long>(_list403.size);
                                        long _elem404;
                                        for (int _i405 = 0; _i405 < _list403.size; ++_i405) {
                                            _elem404 = iprot.readI64();
                                            _key400.add(_elem404);
>>>>>>> YOURS
                                        }
                                        iprot.readListEnd();
                                    }
<<<<<<< MINE
                                    _val499 = iprot.readI64();
                                    struct.executor_start_time_secs.put(_key498, _val499);
=======
                                    _val401 = iprot.readI64();
                                    struct.executor_start_time_secs.put(_key400, _val401);
>>>>>>> YOURS
                                }
                                iprot.readMapEnd();
                            }
                            struct.set_executor_start_time_secs_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Assignment struct) throws org.apache.thrift.TException {
            struct.validate();
            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.master_code_dir != null) {
                oprot.writeFieldBegin(MASTER_CODE_DIR_FIELD_DESC);
                oprot.writeString(struct.master_code_dir);
                oprot.writeFieldEnd();
            }
            if (struct.node_host != null) {
                if (struct.is_set_node_host()) {
                    oprot.writeFieldBegin(NODE_HOST_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.node_host.size()));
<<<<<<< MINE
                        for (Map.Entry<String, String> _iter504 : struct.node_host.entrySet()) {
                            oprot.writeString(_iter504.getKey());
                            oprot.writeString(_iter504.getValue());
=======
                        for (Map.Entry<String, String> _iter406 : struct.node_host.entrySet()) {
                            oprot.writeString(_iter406.getKey());
                            oprot.writeString(_iter406.getValue());
>>>>>>> YOURS
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.executor_node_port != null) {
                if (struct.is_set_executor_node_port()) {
                    oprot.writeFieldBegin(EXECUTOR_NODE_PORT_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, struct.executor_node_port.size()));
<<<<<<< MINE
                        for (Map.Entry<List<Long>, NodeInfo> _iter505 : struct.executor_node_port.entrySet()) {
=======
                        for (Map.Entry<List<Long>, NodeInfo> _iter407 : struct.executor_node_port.entrySet()) {
>>>>>>> YOURS
                            {
<<<<<<< MINE
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter505.getKey().size()));
                                for (long _iter506 : _iter505.getKey()) {
                                    oprot.writeI64(_iter506);
=======
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter407.getKey().size()));
                                for (long _iter408 : _iter407.getKey()) {
                                    oprot.writeI64(_iter408);
>>>>>>> YOURS
                                }
                                oprot.writeListEnd();
                            }
<<<<<<< MINE
                            _iter505.getValue().write(oprot);
=======
                            _iter407.getValue().write(oprot);
>>>>>>> YOURS
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.executor_start_time_secs != null) {
                if (struct.is_set_executor_start_time_secs()) {
                    oprot.writeFieldBegin(EXECUTOR_START_TIME_SECS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I64, struct.executor_start_time_secs.size()));
<<<<<<< MINE
                        for (Map.Entry<List<Long>, Long> _iter507 : struct.executor_start_time_secs.entrySet()) {
=======
                        for (Map.Entry<List<Long>, Long> _iter409 : struct.executor_start_time_secs.entrySet()) {
>>>>>>> YOURS
                            {
<<<<<<< MINE
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter507.getKey().size()));
                                for (long _iter508 : _iter507.getKey()) {
                                    oprot.writeI64(_iter508);
=======
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter409.getKey().size()));
                                for (long _iter410 : _iter409.getKey()) {
                                    oprot.writeI64(_iter410);
>>>>>>> YOURS
                                }
                                oprot.writeListEnd();
                            }
<<<<<<< MINE
                            oprot.writeI64(_iter507.getValue());
=======
                            oprot.writeI64(_iter409.getValue());
>>>>>>> YOURS
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class AssignmentTupleSchemeFactory implements SchemeFactory {

        public AssignmentTupleScheme getScheme() {
            return new AssignmentTupleScheme();
        }
    }

    private static class AssignmentTupleScheme extends TupleScheme<Assignment> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Assignment struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.master_code_dir);
            BitSet optionals = new BitSet();
            if (struct.is_set_node_host()) {
                optionals.set(0);
            }
            if (struct.is_set_executor_node_port()) {
                optionals.set(1);
            }
            if (struct.is_set_executor_start_time_secs()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.is_set_node_host()) {
                {
                    oprot.writeI32(struct.node_host.size());
<<<<<<< MINE
                    for (Map.Entry<String, String> _iter509 : struct.node_host.entrySet()) {
                        oprot.writeString(_iter509.getKey());
                        oprot.writeString(_iter509.getValue());
=======
                    for (Map.Entry<String, String> _iter411 : struct.node_host.entrySet()) {
                        oprot.writeString(_iter411.getKey());
                        oprot.writeString(_iter411.getValue());
>>>>>>> YOURS
                    }
                }
            }
            if (struct.is_set_executor_node_port()) {
                {
                    oprot.writeI32(struct.executor_node_port.size());
<<<<<<< MINE
                    for (Map.Entry<List<Long>, NodeInfo> _iter510 : struct.executor_node_port.entrySet()) {
=======
                    for (Map.Entry<List<Long>, NodeInfo> _iter412 : struct.executor_node_port.entrySet()) {
>>>>>>> YOURS
                        {
<<<<<<< MINE
                            oprot.writeI32(_iter510.getKey().size());
                            for (long _iter511 : _iter510.getKey()) {
                                oprot.writeI64(_iter511);
=======
                            oprot.writeI32(_iter412.getKey().size());
                            for (long _iter413 : _iter412.getKey()) {
                                oprot.writeI64(_iter413);
>>>>>>> YOURS
                            }
                        }
<<<<<<< MINE
                        _iter510.getValue().write(oprot);
=======
                        _iter412.getValue().write(oprot);
>>>>>>> YOURS
                    }
                }
            }
            if (struct.is_set_executor_start_time_secs()) {
                {
                    oprot.writeI32(struct.executor_start_time_secs.size());
<<<<<<< MINE
                    for (Map.Entry<List<Long>, Long> _iter512 : struct.executor_start_time_secs.entrySet()) {
=======
                    for (Map.Entry<List<Long>, Long> _iter414 : struct.executor_start_time_secs.entrySet()) {
>>>>>>> YOURS
                        {
<<<<<<< MINE
                            oprot.writeI32(_iter512.getKey().size());
                            for (long _iter513 : _iter512.getKey()) {
                                oprot.writeI64(_iter513);
=======
                            oprot.writeI32(_iter414.getKey().size());
                            for (long _iter415 : _iter414.getKey()) {
                                oprot.writeI64(_iter415);
>>>>>>> YOURS
                            }
                        }
<<<<<<< MINE
                        oprot.writeI64(_iter512.getValue());
=======
                        oprot.writeI64(_iter414.getValue());
>>>>>>> YOURS
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Assignment struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.master_code_dir = iprot.readString();
            struct.set_master_code_dir_isSet(true);
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                {
<<<<<<< MINE
                    org.apache.thrift.protocol.TMap _map514 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.node_host = new HashMap<String, String>(2 * _map514.size);
                    String _key515;
                    String _val516;
                    for (int _i517 = 0; _i517 < _map514.size; ++_i517) {
                        _key515 = iprot.readString();
                        _val516 = iprot.readString();
                        struct.node_host.put(_key515, _val516);
=======
                    org.apache.thrift.protocol.TMap _map416 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.node_host = new HashMap<String, String>(2 * _map416.size);
                    String _key417;
                    String _val418;
                    for (int _i419 = 0; _i419 < _map416.size; ++_i419) {
                        _key417 = iprot.readString();
                        _val418 = iprot.readString();
                        struct.node_host.put(_key417, _val418);
>>>>>>> YOURS
                    }
                }
                struct.set_node_host_isSet(true);
            }
            if (incoming.get(1)) {
                {
<<<<<<< MINE
                    org.apache.thrift.protocol.TMap _map518 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.executor_node_port = new HashMap<List<Long>, NodeInfo>(2 * _map518.size);
                    List<Long> _key519;
                    NodeInfo _val520;
                    for (int _i521 = 0; _i521 < _map518.size; ++_i521) {
=======
                    org.apache.thrift.protocol.TMap _map420 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.executor_node_port = new HashMap<List<Long>, NodeInfo>(2 * _map420.size);
                    List<Long> _key421;
                    NodeInfo _val422;
                    for (int _i423 = 0; _i423 < _map420.size; ++_i423) {
>>>>>>> YOURS
                        {
<<<<<<< MINE
                            org.apache.thrift.protocol.TList _list522 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                            _key519 = new ArrayList<Long>(_list522.size);
                            long _elem523;
                            for (int _i524 = 0; _i524 < _list522.size; ++_i524) {
                                _elem523 = iprot.readI64();
                                _key519.add(_elem523);
=======
                            org.apache.thrift.protocol.TList _list424 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                            _key421 = new ArrayList<Long>(_list424.size);
                            long _elem425;
                            for (int _i426 = 0; _i426 < _list424.size; ++_i426) {
                                _elem425 = iprot.readI64();
                                _key421.add(_elem425);
>>>>>>> YOURS
                            }
                        }
<<<<<<< MINE
                        _val520 = new NodeInfo();
                        _val520.read(iprot);
                        struct.executor_node_port.put(_key519, _val520);
=======
                        _val422 = new NodeInfo();
                        _val422.read(iprot);
                        struct.executor_node_port.put(_key421, _val422);
>>>>>>> YOURS
                    }
                }
                struct.set_executor_node_port_isSet(true);
            }
            if (incoming.get(2)) {
                {
<<<<<<< MINE
                    org.apache.thrift.protocol.TMap _map525 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I64, iprot.readI32());
                    struct.executor_start_time_secs = new HashMap<List<Long>, Long>(2 * _map525.size);
                    List<Long> _key526;
                    long _val527;
                    for (int _i528 = 0; _i528 < _map525.size; ++_i528) {
=======
                    org.apache.thrift.protocol.TMap _map427 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I64, iprot.readI32());
                    struct.executor_start_time_secs = new HashMap<List<Long>, Long>(2 * _map427.size);
                    List<Long> _key428;
                    long _val429;
                    for (int _i430 = 0; _i430 < _map427.size; ++_i430) {
>>>>>>> YOURS
                        {
<<<<<<< MINE
                            org.apache.thrift.protocol.TList _list529 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                            _key526 = new ArrayList<Long>(_list529.size);
                            long _elem530;
                            for (int _i531 = 0; _i531 < _list529.size; ++_i531) {
                                _elem530 = iprot.readI64();
                                _key526.add(_elem530);
=======
                            org.apache.thrift.protocol.TList _list431 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                            _key428 = new ArrayList<Long>(_list431.size);
                            long _elem432;
                            for (int _i433 = 0; _i433 < _list431.size; ++_i433) {
                                _elem432 = iprot.readI64();
                                _key428.add(_elem432);
>>>>>>> YOURS
                            }
                        }
<<<<<<< MINE
                        _val527 = iprot.readI64();
                        struct.executor_start_time_secs.put(_key526, _val527);
=======
                        _val429 = iprot.readI64();
                        struct.executor_start_time_secs.put(_key428, _val429);
>>>>>>> YOURS
                    }
                }
                struct.set_executor_start_time_secs_isSet(true);
            }
        }
    }
}