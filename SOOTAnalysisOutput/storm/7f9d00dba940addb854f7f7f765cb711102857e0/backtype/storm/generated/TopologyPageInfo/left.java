package backtype.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-30")
public class TopologyPageInfo implements org.apache.thrift.TBase<TopologyPageInfo, TopologyPageInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TopologyPageInfo> {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopologyPageInfo");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I32, (short) 3);

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final org.apache.thrift.protocol.TField NUM_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_tasks", org.apache.thrift.protocol.TType.I32, (short) 5);

    private static final org.apache.thrift.protocol.TField NUM_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_workers", org.apache.thrift.protocol.TType.I32, (short) 6);

    private static final org.apache.thrift.protocol.TField NUM_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executors", org.apache.thrift.protocol.TType.I32, (short) 7);

    private static final org.apache.thrift.protocol.TField TOPOLOGY_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_conf", org.apache.thrift.protocol.TType.STRING, (short) 8);

    private static final org.apache.thrift.protocol.TField ID_TO_SPOUT_AGG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("id_to_spout_agg_stats", org.apache.thrift.protocol.TType.MAP, (short) 9);

    private static final org.apache.thrift.protocol.TField ID_TO_BOLT_AGG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("id_to_bolt_agg_stats", org.apache.thrift.protocol.TType.MAP, (short) 10);

    private static final org.apache.thrift.protocol.TField SCHED_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("sched_status", org.apache.thrift.protocol.TType.STRING, (short) 11);

    private static final org.apache.thrift.protocol.TField TOPOLOGY_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_stats", org.apache.thrift.protocol.TType.STRUCT, (short) 12);

    private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short) 13);

    private static final org.apache.thrift.protocol.TField DEBUG_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_options", org.apache.thrift.protocol.TType.STRUCT, (short) 14);

    private static final org.apache.thrift.protocol.TField REPLICATION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("replication_count", org.apache.thrift.protocol.TType.I32, (short) 15);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new TopologyPageInfoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new TopologyPageInfoTupleSchemeFactory());
    }

    private String id;

    private String name;

    private int uptime_secs;

    private String status;

    private int num_tasks;

    private int num_workers;

    private int num_executors;

    private String topology_conf;

    private Map<String, ComponentAggregateStats> id_to_spout_agg_stats;

    private Map<String, ComponentAggregateStats> id_to_bolt_agg_stats;

    private String sched_status;

    private TopologyStats topology_stats;

    private String owner;

    private DebugOptions debug_options;

    private int replication_count;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        ID((short) 1, "id"),
        NAME((short) 2, "name"),
        UPTIME_SECS((short) 3, "uptime_secs"),
        STATUS((short) 4, "status"),
        NUM_TASKS((short) 5, "num_tasks"),
        NUM_WORKERS((short) 6, "num_workers"),
        NUM_EXECUTORS((short) 7, "num_executors"),
        TOPOLOGY_CONF((short) 8, "topology_conf"),
        ID_TO_SPOUT_AGG_STATS((short) 9, "id_to_spout_agg_stats"),
        ID_TO_BOLT_AGG_STATS((short) 10, "id_to_bolt_agg_stats"),
        SCHED_STATUS((short) 11, "sched_status"),
        TOPOLOGY_STATS((short) 12, "topology_stats"),
        OWNER((short) 13, "owner"),
        DEBUG_OPTIONS((short) 14, "debug_options"),
        REPLICATION_COUNT((short) 15, "replication_count");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1:
                    return ID;
                case 2:
                    return NAME;
                case 3:
                    return UPTIME_SECS;
                case 4:
                    return STATUS;
                case 5:
                    return NUM_TASKS;
                case 6:
                    return NUM_WORKERS;
                case 7:
                    return NUM_EXECUTORS;
                case 8:
                    return TOPOLOGY_CONF;
                case 9:
                    return ID_TO_SPOUT_AGG_STATS;
                case 10:
                    return ID_TO_BOLT_AGG_STATS;
                case 11:
                    return SCHED_STATUS;
                case 12:
                    return TOPOLOGY_STATS;
                case 13:
                    return OWNER;
                case 14:
                    return DEBUG_OPTIONS;
                case 15:
                    return REPLICATION_COUNT;
                default:
                    return null;
            }
        }

        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static final int __UPTIME_SECS_ISSET_ID = 0;

    private static final int __NUM_TASKS_ISSET_ID = 1;

    private static final int __NUM_WORKERS_ISSET_ID = 2;

    private static final int __NUM_EXECUTORS_ISSET_ID = 3;

    private static final int __REPLICATION_COUNT_ISSET_ID = 4;

    private byte __isset_bitfield = 0;

    private static final _Fields[] optionals = { _Fields.NAME, _Fields.UPTIME_SECS, _Fields.STATUS, _Fields.NUM_TASKS, _Fields.NUM_WORKERS, _Fields.NUM_EXECUTORS, _Fields.TOPOLOGY_CONF, _Fields.ID_TO_SPOUT_AGG_STATS, _Fields.ID_TO_BOLT_AGG_STATS, _Fields.SCHED_STATUS, _Fields.TOPOLOGY_STATS, _Fields.OWNER, _Fields.DEBUG_OPTIONS, _Fields.REPLICATION_COUNT };

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NUM_TASKS, new org.apache.thrift.meta_data.FieldMetaData("num_tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NUM_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_workers", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NUM_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("num_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TOPOLOGY_CONF, new org.apache.thrift.meta_data.FieldMetaData("topology_conf", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ID_TO_SPOUT_AGG_STATS, new org.apache.thrift.meta_data.FieldMetaData("id_to_spout_agg_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentAggregateStats.class))));
        tmpMap.put(_Fields.ID_TO_BOLT_AGG_STATS, new org.apache.thrift.meta_data.FieldMetaData("id_to_bolt_agg_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentAggregateStats.class))));
        tmpMap.put(_Fields.SCHED_STATUS, new org.apache.thrift.meta_data.FieldMetaData("sched_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TOPOLOGY_STATS, new org.apache.thrift.meta_data.FieldMetaData("topology_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopologyStats.class)));
        tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DEBUG_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("debug_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DebugOptions.class)));
        tmpMap.put(_Fields.REPLICATION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("replication_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopologyPageInfo.class, metaDataMap);
    }

    public TopologyPageInfo() {
    }

    public TopologyPageInfo(String id) {
        this();
        this.id = id;
    }

    public TopologyPageInfo(TopologyPageInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.is_set_id()) {
            this.id = other.id;
        }
        if (other.is_set_name()) {
            this.name = other.name;
        }
        this.uptime_secs = other.uptime_secs;
        if (other.is_set_status()) {
            this.status = other.status;
        }
        this.num_tasks = other.num_tasks;
        this.num_workers = other.num_workers;
        this.num_executors = other.num_executors;
        if (other.is_set_topology_conf()) {
            this.topology_conf = other.topology_conf;
        }
        if (other.is_set_id_to_spout_agg_stats()) {
            Map<String, ComponentAggregateStats> __this__id_to_spout_agg_stats = new HashMap<String, ComponentAggregateStats>(other.id_to_spout_agg_stats.size());
            for (Map.Entry<String, ComponentAggregateStats> other_element : other.id_to_spout_agg_stats.entrySet()) {
                String other_element_key = other_element.getKey();
                ComponentAggregateStats other_element_value = other_element.getValue();
                String __this__id_to_spout_agg_stats_copy_key = other_element_key;
                ComponentAggregateStats __this__id_to_spout_agg_stats_copy_value = new ComponentAggregateStats(other_element_value);
                __this__id_to_spout_agg_stats.put(__this__id_to_spout_agg_stats_copy_key, __this__id_to_spout_agg_stats_copy_value);
            }
            this.id_to_spout_agg_stats = __this__id_to_spout_agg_stats;
        }
        if (other.is_set_id_to_bolt_agg_stats()) {
            Map<String, ComponentAggregateStats> __this__id_to_bolt_agg_stats = new HashMap<String, ComponentAggregateStats>(other.id_to_bolt_agg_stats.size());
            for (Map.Entry<String, ComponentAggregateStats> other_element : other.id_to_bolt_agg_stats.entrySet()) {
                String other_element_key = other_element.getKey();
                ComponentAggregateStats other_element_value = other_element.getValue();
                String __this__id_to_bolt_agg_stats_copy_key = other_element_key;
                ComponentAggregateStats __this__id_to_bolt_agg_stats_copy_value = new ComponentAggregateStats(other_element_value);
                __this__id_to_bolt_agg_stats.put(__this__id_to_bolt_agg_stats_copy_key, __this__id_to_bolt_agg_stats_copy_value);
            }
            this.id_to_bolt_agg_stats = __this__id_to_bolt_agg_stats;
        }
        if (other.is_set_sched_status()) {
            this.sched_status = other.sched_status;
        }
        if (other.is_set_topology_stats()) {
            this.topology_stats = new TopologyStats(other.topology_stats);
        }
        if (other.is_set_owner()) {
            this.owner = other.owner;
        }
        if (other.is_set_debug_options()) {
            this.debug_options = new DebugOptions(other.debug_options);
        }
        this.replication_count = other.replication_count;
    }

    public TopologyPageInfo deepCopy() {
        return new TopologyPageInfo(this);
    }

    @Override
    public void clear() {
        this.id = null;
        this.name = null;
        set_uptime_secs_isSet(false);
        this.uptime_secs = 0;
        this.status = null;
        set_num_tasks_isSet(false);
        this.num_tasks = 0;
        set_num_workers_isSet(false);
        this.num_workers = 0;
        set_num_executors_isSet(false);
        this.num_executors = 0;
        this.topology_conf = null;
        this.id_to_spout_agg_stats = null;
        this.id_to_bolt_agg_stats = null;
        this.sched_status = null;
        this.topology_stats = null;
        this.owner = null;
        this.debug_options = null;
        set_replication_count_isSet(false);
        this.replication_count = 0;
    }

    public String get_id() {
        return this.id;
    }

    public void set_id(String id) {
        this.id = id;
    }

    public void unset_id() {
        this.id = null;
    }

    public boolean is_set_id() {
        return this.id != null;
    }

    public void set_id_isSet(boolean value) {
        if (!value) {
            this.id = null;
        }
    }

    public String get_name() {
        return this.name;
    }

    public void set_name(String name) {
        this.name = name;
    }

    public void unset_name() {
        this.name = null;
    }

    public boolean is_set_name() {
        return this.name != null;
    }

    public void set_name_isSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public int get_uptime_secs() {
        return this.uptime_secs;
    }

    public void set_uptime_secs(int uptime_secs) {
        this.uptime_secs = uptime_secs;
        set_uptime_secs_isSet(true);
    }

    public void unset_uptime_secs() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
    }

    public boolean is_set_uptime_secs() {
        return EncodingUtils.testBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
    }

    public void set_uptime_secs_isSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID, value);
    }

    public String get_status() {
        return this.status;
    }

    public void set_status(String status) {
        this.status = status;
    }

    public void unset_status() {
        this.status = null;
    }

    public boolean is_set_status() {
        return this.status != null;
    }

    public void set_status_isSet(boolean value) {
        if (!value) {
            this.status = null;
        }
    }

    public int get_num_tasks() {
        return this.num_tasks;
    }

    public void set_num_tasks(int num_tasks) {
        this.num_tasks = num_tasks;
        set_num_tasks_isSet(true);
    }

    public void unset_num_tasks() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_TASKS_ISSET_ID);
    }

    public boolean is_set_num_tasks() {
        return EncodingUtils.testBit(__isset_bitfield, __NUM_TASKS_ISSET_ID);
    }

    public void set_num_tasks_isSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_TASKS_ISSET_ID, value);
    }

    public int get_num_workers() {
        return this.num_workers;
    }

    public void set_num_workers(int num_workers) {
        this.num_workers = num_workers;
        set_num_workers_isSet(true);
    }

    public void unset_num_workers() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
    }

    public boolean is_set_num_workers() {
        return EncodingUtils.testBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
    }

    public void set_num_workers_isSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID, value);
    }

    public int get_num_executors() {
        return this.num_executors;
    }

    public void set_num_executors(int num_executors) {
        this.num_executors = num_executors;
        set_num_executors_isSet(true);
    }

    public void unset_num_executors() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
    }

    public boolean is_set_num_executors() {
        return EncodingUtils.testBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
    }

    public void set_num_executors_isSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID, value);
    }

    public String get_topology_conf() {
        return this.topology_conf;
    }

    public void set_topology_conf(String topology_conf) {
        this.topology_conf = topology_conf;
    }

    public void unset_topology_conf() {
        this.topology_conf = null;
    }

    public boolean is_set_topology_conf() {
        return this.topology_conf != null;
    }

    public void set_topology_conf_isSet(boolean value) {
        if (!value) {
            this.topology_conf = null;
        }
    }

    public int get_id_to_spout_agg_stats_size() {
        return (this.id_to_spout_agg_stats == null) ? 0 : this.id_to_spout_agg_stats.size();
    }

    public void put_to_id_to_spout_agg_stats(String key, ComponentAggregateStats val) {
        if (this.id_to_spout_agg_stats == null) {
            this.id_to_spout_agg_stats = new HashMap<String, ComponentAggregateStats>();
        }
        this.id_to_spout_agg_stats.put(key, val);
    }

    public Map<String, ComponentAggregateStats> get_id_to_spout_agg_stats() {
        return this.id_to_spout_agg_stats;
    }

    public void set_id_to_spout_agg_stats(Map<String, ComponentAggregateStats> id_to_spout_agg_stats) {
        this.id_to_spout_agg_stats = id_to_spout_agg_stats;
    }

    public void unset_id_to_spout_agg_stats() {
        this.id_to_spout_agg_stats = null;
    }

    public boolean is_set_id_to_spout_agg_stats() {
        return this.id_to_spout_agg_stats != null;
    }

    public void set_id_to_spout_agg_stats_isSet(boolean value) {
        if (!value) {
            this.id_to_spout_agg_stats = null;
        }
    }

    public int get_id_to_bolt_agg_stats_size() {
        return (this.id_to_bolt_agg_stats == null) ? 0 : this.id_to_bolt_agg_stats.size();
    }

    public void put_to_id_to_bolt_agg_stats(String key, ComponentAggregateStats val) {
        if (this.id_to_bolt_agg_stats == null) {
            this.id_to_bolt_agg_stats = new HashMap<String, ComponentAggregateStats>();
        }
        this.id_to_bolt_agg_stats.put(key, val);
    }

    public Map<String, ComponentAggregateStats> get_id_to_bolt_agg_stats() {
        return this.id_to_bolt_agg_stats;
    }

    public void set_id_to_bolt_agg_stats(Map<String, ComponentAggregateStats> id_to_bolt_agg_stats) {
        this.id_to_bolt_agg_stats = id_to_bolt_agg_stats;
    }

    public void unset_id_to_bolt_agg_stats() {
        this.id_to_bolt_agg_stats = null;
    }

    public boolean is_set_id_to_bolt_agg_stats() {
        return this.id_to_bolt_agg_stats != null;
    }

    public void set_id_to_bolt_agg_stats_isSet(boolean value) {
        if (!value) {
            this.id_to_bolt_agg_stats = null;
        }
    }

    public String get_sched_status() {
        return this.sched_status;
    }

    public void set_sched_status(String sched_status) {
        this.sched_status = sched_status;
    }

    public void unset_sched_status() {
        this.sched_status = null;
    }

    public boolean is_set_sched_status() {
        return this.sched_status != null;
    }

    public void set_sched_status_isSet(boolean value) {
        if (!value) {
            this.sched_status = null;
        }
    }

    public TopologyStats get_topology_stats() {
        return this.topology_stats;
    }

    public void set_topology_stats(TopologyStats topology_stats) {
        this.topology_stats = topology_stats;
    }

    public void unset_topology_stats() {
        this.topology_stats = null;
    }

    public boolean is_set_topology_stats() {
        return this.topology_stats != null;
    }

    public void set_topology_stats_isSet(boolean value) {
        if (!value) {
            this.topology_stats = null;
        }
    }

    public String get_owner() {
        return this.owner;
    }

    public void set_owner(String owner) {
        this.owner = owner;
    }

    public void unset_owner() {
        this.owner = null;
    }

    public boolean is_set_owner() {
        return this.owner != null;
    }

    public void set_owner_isSet(boolean value) {
        if (!value) {
            this.owner = null;
        }
    }

    public DebugOptions get_debug_options() {
        return this.debug_options;
    }

    public void set_debug_options(DebugOptions debug_options) {
        this.debug_options = debug_options;
    }

    public void unset_debug_options() {
        this.debug_options = null;
    }

    public boolean is_set_debug_options() {
        return this.debug_options != null;
    }

    public void set_debug_options_isSet(boolean value) {
        if (!value) {
            this.debug_options = null;
        }
    }

    public int get_replication_count() {
        return this.replication_count;
    }

    public void set_replication_count(int replication_count) {
        this.replication_count = replication_count;
        set_replication_count_isSet(true);
    }

    public void unset_replication_count() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICATION_COUNT_ISSET_ID);
    }

    public boolean is_set_replication_count() {
        return EncodingUtils.testBit(__isset_bitfield, __REPLICATION_COUNT_ISSET_ID);
    }

    public void set_replication_count_isSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICATION_COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case ID:
                if (value == null) {
                    unset_id();
                } else {
                    set_id((String) value);
                }
                break;
            case NAME:
                if (value == null) {
                    unset_name();
                } else {
                    set_name((String) value);
                }
                break;
            case UPTIME_SECS:
                if (value == null) {
                    unset_uptime_secs();
                } else {
                    set_uptime_secs((Integer) value);
                }
                break;
            case STATUS:
                if (value == null) {
                    unset_status();
                } else {
                    set_status((String) value);
                }
                break;
            case NUM_TASKS:
                if (value == null) {
                    unset_num_tasks();
                } else {
                    set_num_tasks((Integer) value);
                }
                break;
            case NUM_WORKERS:
                if (value == null) {
                    unset_num_workers();
                } else {
                    set_num_workers((Integer) value);
                }
                break;
            case NUM_EXECUTORS:
                if (value == null) {
                    unset_num_executors();
                } else {
                    set_num_executors((Integer) value);
                }
                break;
            case TOPOLOGY_CONF:
                if (value == null) {
                    unset_topology_conf();
                } else {
                    set_topology_conf((String) value);
                }
                break;
            case ID_TO_SPOUT_AGG_STATS:
                if (value == null) {
                    unset_id_to_spout_agg_stats();
                } else {
                    set_id_to_spout_agg_stats((Map<String, ComponentAggregateStats>) value);
                }
                break;
            case ID_TO_BOLT_AGG_STATS:
                if (value == null) {
                    unset_id_to_bolt_agg_stats();
                } else {
                    set_id_to_bolt_agg_stats((Map<String, ComponentAggregateStats>) value);
                }
                break;
            case SCHED_STATUS:
                if (value == null) {
                    unset_sched_status();
                } else {
                    set_sched_status((String) value);
                }
                break;
            case TOPOLOGY_STATS:
                if (value == null) {
                    unset_topology_stats();
                } else {
                    set_topology_stats((TopologyStats) value);
                }
                break;
            case OWNER:
                if (value == null) {
                    unset_owner();
                } else {
                    set_owner((String) value);
                }
                break;
            case DEBUG_OPTIONS:
                if (value == null) {
                    unset_debug_options();
                } else {
                    set_debug_options((DebugOptions) value);
                }
                break;
            case REPLICATION_COUNT:
                if (value == null) {
                    unset_replication_count();
                } else {
                    set_replication_count((Integer) value);
                }
                break;
        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case ID:
                return get_id();
            case NAME:
                return get_name();
            case UPTIME_SECS:
                return Integer.valueOf(get_uptime_secs());
            case STATUS:
                return get_status();
            case NUM_TASKS:
                return Integer.valueOf(get_num_tasks());
            case NUM_WORKERS:
                return Integer.valueOf(get_num_workers());
            case NUM_EXECUTORS:
                return Integer.valueOf(get_num_executors());
            case TOPOLOGY_CONF:
                return get_topology_conf();
            case ID_TO_SPOUT_AGG_STATS:
                return get_id_to_spout_agg_stats();
            case ID_TO_BOLT_AGG_STATS:
                return get_id_to_bolt_agg_stats();
            case SCHED_STATUS:
                return get_sched_status();
            case TOPOLOGY_STATS:
                return get_topology_stats();
            case OWNER:
                return get_owner();
            case DEBUG_OPTIONS:
                return get_debug_options();
            case REPLICATION_COUNT:
                return Integer.valueOf(get_replication_count());
        }
        throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }
        switch(field) {
            case ID:
                return is_set_id();
            case NAME:
                return is_set_name();
            case UPTIME_SECS:
                return is_set_uptime_secs();
            case STATUS:
                return is_set_status();
            case NUM_TASKS:
                return is_set_num_tasks();
            case NUM_WORKERS:
                return is_set_num_workers();
            case NUM_EXECUTORS:
                return is_set_num_executors();
            case TOPOLOGY_CONF:
                return is_set_topology_conf();
            case ID_TO_SPOUT_AGG_STATS:
                return is_set_id_to_spout_agg_stats();
            case ID_TO_BOLT_AGG_STATS:
                return is_set_id_to_bolt_agg_stats();
            case SCHED_STATUS:
                return is_set_sched_status();
            case TOPOLOGY_STATS:
                return is_set_topology_stats();
            case OWNER:
                return is_set_owner();
            case DEBUG_OPTIONS:
                return is_set_debug_options();
            case REPLICATION_COUNT:
                return is_set_replication_count();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TopologyPageInfo)
            return this.equals((TopologyPageInfo) that);
        return false;
    }

    public boolean equals(TopologyPageInfo that) {
        if (that == null)
            return false;
        boolean this_present_id = true && this.is_set_id();
        boolean that_present_id = true && that.is_set_id();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (!this.id.equals(that.id))
                return false;
        }
        boolean this_present_name = true && this.is_set_name();
        boolean that_present_name = true && that.is_set_name();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }
        boolean this_present_uptime_secs = true && this.is_set_uptime_secs();
        boolean that_present_uptime_secs = true && that.is_set_uptime_secs();
        if (this_present_uptime_secs || that_present_uptime_secs) {
            if (!(this_present_uptime_secs && that_present_uptime_secs))
                return false;
            if (this.uptime_secs != that.uptime_secs)
                return false;
        }
        boolean this_present_status = true && this.is_set_status();
        boolean that_present_status = true && that.is_set_status();
        if (this_present_status || that_present_status) {
            if (!(this_present_status && that_present_status))
                return false;
            if (!this.status.equals(that.status))
                return false;
        }
        boolean this_present_num_tasks = true && this.is_set_num_tasks();
        boolean that_present_num_tasks = true && that.is_set_num_tasks();
        if (this_present_num_tasks || that_present_num_tasks) {
            if (!(this_present_num_tasks && that_present_num_tasks))
                return false;
            if (this.num_tasks != that.num_tasks)
                return false;
        }
        boolean this_present_num_workers = true && this.is_set_num_workers();
        boolean that_present_num_workers = true && that.is_set_num_workers();
        if (this_present_num_workers || that_present_num_workers) {
            if (!(this_present_num_workers && that_present_num_workers))
                return false;
            if (this.num_workers != that.num_workers)
                return false;
        }
        boolean this_present_num_executors = true && this.is_set_num_executors();
        boolean that_present_num_executors = true && that.is_set_num_executors();
        if (this_present_num_executors || that_present_num_executors) {
            if (!(this_present_num_executors && that_present_num_executors))
                return false;
            if (this.num_executors != that.num_executors)
                return false;
        }
        boolean this_present_topology_conf = true && this.is_set_topology_conf();
        boolean that_present_topology_conf = true && that.is_set_topology_conf();
        if (this_present_topology_conf || that_present_topology_conf) {
            if (!(this_present_topology_conf && that_present_topology_conf))
                return false;
            if (!this.topology_conf.equals(that.topology_conf))
                return false;
        }
        boolean this_present_id_to_spout_agg_stats = true && this.is_set_id_to_spout_agg_stats();
        boolean that_present_id_to_spout_agg_stats = true && that.is_set_id_to_spout_agg_stats();
        if (this_present_id_to_spout_agg_stats || that_present_id_to_spout_agg_stats) {
            if (!(this_present_id_to_spout_agg_stats && that_present_id_to_spout_agg_stats))
                return false;
            if (!this.id_to_spout_agg_stats.equals(that.id_to_spout_agg_stats))
                return false;
        }
        boolean this_present_id_to_bolt_agg_stats = true && this.is_set_id_to_bolt_agg_stats();
        boolean that_present_id_to_bolt_agg_stats = true && that.is_set_id_to_bolt_agg_stats();
        if (this_present_id_to_bolt_agg_stats || that_present_id_to_bolt_agg_stats) {
            if (!(this_present_id_to_bolt_agg_stats && that_present_id_to_bolt_agg_stats))
                return false;
            if (!this.id_to_bolt_agg_stats.equals(that.id_to_bolt_agg_stats))
                return false;
        }
        boolean this_present_sched_status = true && this.is_set_sched_status();
        boolean that_present_sched_status = true && that.is_set_sched_status();
        if (this_present_sched_status || that_present_sched_status) {
            if (!(this_present_sched_status && that_present_sched_status))
                return false;
            if (!this.sched_status.equals(that.sched_status))
                return false;
        }
        boolean this_present_topology_stats = true && this.is_set_topology_stats();
        boolean that_present_topology_stats = true && that.is_set_topology_stats();
        if (this_present_topology_stats || that_present_topology_stats) {
            if (!(this_present_topology_stats && that_present_topology_stats))
                return false;
            if (!this.topology_stats.equals(that.topology_stats))
                return false;
        }
        boolean this_present_owner = true && this.is_set_owner();
        boolean that_present_owner = true && that.is_set_owner();
        if (this_present_owner || that_present_owner) {
            if (!(this_present_owner && that_present_owner))
                return false;
            if (!this.owner.equals(that.owner))
                return false;
        }
        boolean this_present_debug_options = true && this.is_set_debug_options();
        boolean that_present_debug_options = true && that.is_set_debug_options();
        if (this_present_debug_options || that_present_debug_options) {
            if (!(this_present_debug_options && that_present_debug_options))
                return false;
            if (!this.debug_options.equals(that.debug_options))
                return false;
        }
        boolean this_present_replication_count = true && this.is_set_replication_count();
        boolean that_present_replication_count = true && that.is_set_replication_count();
        if (this_present_replication_count || that_present_replication_count) {
            if (!(this_present_replication_count && that_present_replication_count))
                return false;
            if (this.replication_count != that.replication_count)
                return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();
        boolean present_id = true && (is_set_id());
        list.add(present_id);
        if (present_id)
            list.add(id);
        boolean present_name = true && (is_set_name());
        list.add(present_name);
        if (present_name)
            list.add(name);
        boolean present_uptime_secs = true && (is_set_uptime_secs());
        list.add(present_uptime_secs);
        if (present_uptime_secs)
            list.add(uptime_secs);
        boolean present_status = true && (is_set_status());
        list.add(present_status);
        if (present_status)
            list.add(status);
        boolean present_num_tasks = true && (is_set_num_tasks());
        list.add(present_num_tasks);
        if (present_num_tasks)
            list.add(num_tasks);
        boolean present_num_workers = true && (is_set_num_workers());
        list.add(present_num_workers);
        if (present_num_workers)
            list.add(num_workers);
        boolean present_num_executors = true && (is_set_num_executors());
        list.add(present_num_executors);
        if (present_num_executors)
            list.add(num_executors);
        boolean present_topology_conf = true && (is_set_topology_conf());
        list.add(present_topology_conf);
        if (present_topology_conf)
            list.add(topology_conf);
        boolean present_id_to_spout_agg_stats = true && (is_set_id_to_spout_agg_stats());
        list.add(present_id_to_spout_agg_stats);
        if (present_id_to_spout_agg_stats)
            list.add(id_to_spout_agg_stats);
        boolean present_id_to_bolt_agg_stats = true && (is_set_id_to_bolt_agg_stats());
        list.add(present_id_to_bolt_agg_stats);
        if (present_id_to_bolt_agg_stats)
            list.add(id_to_bolt_agg_stats);
        boolean present_sched_status = true && (is_set_sched_status());
        list.add(present_sched_status);
        if (present_sched_status)
            list.add(sched_status);
        boolean present_topology_stats = true && (is_set_topology_stats());
        list.add(present_topology_stats);
        if (present_topology_stats)
            list.add(topology_stats);
        boolean present_owner = true && (is_set_owner());
        list.add(present_owner);
        if (present_owner)
            list.add(owner);
        boolean present_debug_options = true && (is_set_debug_options());
        list.add(present_debug_options);
        if (present_debug_options)
            list.add(debug_options);
        boolean present_replication_count = true && (is_set_replication_count());
        list.add(present_replication_count);
        if (present_replication_count)
            list.add(replication_count);
        return list.hashCode();
    }

    @Override
    public int compareTo(TopologyPageInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }
        int lastComparison = 0;
        lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_id()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_name()).compareTo(other.is_set_name());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_name()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_uptime_secs()).compareTo(other.is_set_uptime_secs());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_uptime_secs()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, other.uptime_secs);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_status()).compareTo(other.is_set_status());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_status()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_num_tasks()).compareTo(other.is_set_num_tasks());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_num_tasks()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_tasks, other.num_tasks);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_num_workers()).compareTo(other.is_set_num_workers());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_num_workers()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_workers, other.num_workers);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_num_executors()).compareTo(other.is_set_num_executors());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_num_executors()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executors, other.num_executors);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_topology_conf()).compareTo(other.is_set_topology_conf());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_topology_conf()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_conf, other.topology_conf);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_id_to_spout_agg_stats()).compareTo(other.is_set_id_to_spout_agg_stats());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_id_to_spout_agg_stats()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_to_spout_agg_stats, other.id_to_spout_agg_stats);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_id_to_bolt_agg_stats()).compareTo(other.is_set_id_to_bolt_agg_stats());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_id_to_bolt_agg_stats()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_to_bolt_agg_stats, other.id_to_bolt_agg_stats);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_sched_status()).compareTo(other.is_set_sched_status());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_sched_status()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sched_status, other.sched_status);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_topology_stats()).compareTo(other.is_set_topology_stats());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_topology_stats()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_stats, other.topology_stats);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_owner()).compareTo(other.is_set_owner());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_owner()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_debug_options()).compareTo(other.is_set_debug_options());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_debug_options()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_options, other.debug_options);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(is_set_replication_count()).compareTo(other.is_set_replication_count());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (is_set_replication_count()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_count, other.replication_count);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TopologyPageInfo(");
        boolean first = true;
        sb.append("id:");
        if (this.id == null) {
            sb.append("null");
        } else {
            sb.append(this.id);
        }
        first = false;
        if (is_set_name()) {
            if (!first)
                sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
        }
        if (is_set_uptime_secs()) {
            if (!first)
                sb.append(", ");
            sb.append("uptime_secs:");
            sb.append(this.uptime_secs);
            first = false;
        }
        if (is_set_status()) {
            if (!first)
                sb.append(", ");
            sb.append("status:");
            if (this.status == null) {
                sb.append("null");
            } else {
                sb.append(this.status);
            }
            first = false;
        }
        if (is_set_num_tasks()) {
            if (!first)
                sb.append(", ");
            sb.append("num_tasks:");
            sb.append(this.num_tasks);
            first = false;
        }
        if (is_set_num_workers()) {
            if (!first)
                sb.append(", ");
            sb.append("num_workers:");
            sb.append(this.num_workers);
            first = false;
        }
        if (is_set_num_executors()) {
            if (!first)
                sb.append(", ");
            sb.append("num_executors:");
            sb.append(this.num_executors);
            first = false;
        }
        if (is_set_topology_conf()) {
            if (!first)
                sb.append(", ");
            sb.append("topology_conf:");
            if (this.topology_conf == null) {
                sb.append("null");
            } else {
                sb.append(this.topology_conf);
            }
            first = false;
        }
        if (is_set_id_to_spout_agg_stats()) {
            if (!first)
                sb.append(", ");
            sb.append("id_to_spout_agg_stats:");
            if (this.id_to_spout_agg_stats == null) {
                sb.append("null");
            } else {
                sb.append(this.id_to_spout_agg_stats);
            }
            first = false;
        }
        if (is_set_id_to_bolt_agg_stats()) {
            if (!first)
                sb.append(", ");
            sb.append("id_to_bolt_agg_stats:");
            if (this.id_to_bolt_agg_stats == null) {
                sb.append("null");
            } else {
                sb.append(this.id_to_bolt_agg_stats);
            }
            first = false;
        }
        if (is_set_sched_status()) {
            if (!first)
                sb.append(", ");
            sb.append("sched_status:");
            if (this.sched_status == null) {
                sb.append("null");
            } else {
                sb.append(this.sched_status);
            }
            first = false;
        }
        if (is_set_topology_stats()) {
            if (!first)
                sb.append(", ");
            sb.append("topology_stats:");
            if (this.topology_stats == null) {
                sb.append("null");
            } else {
                sb.append(this.topology_stats);
            }
            first = false;
        }
        if (is_set_owner()) {
            if (!first)
                sb.append(", ");
            sb.append("owner:");
            if (this.owner == null) {
                sb.append("null");
            } else {
                sb.append(this.owner);
            }
            first = false;
        }
        if (is_set_debug_options()) {
            if (!first)
                sb.append(", ");
            sb.append("debug_options:");
            if (this.debug_options == null) {
                sb.append("null");
            } else {
                sb.append(this.debug_options);
            }
            first = false;
        }
        if (is_set_replication_count()) {
            if (!first)
                sb.append(", ");
            sb.append("replication_count:");
            sb.append(this.replication_count);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        if (!is_set_id()) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
        }
        if (topology_stats != null) {
            topology_stats.validate();
        }
        if (debug_options != null) {
            debug_options.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TopologyPageInfoStandardSchemeFactory implements SchemeFactory {

        public TopologyPageInfoStandardScheme getScheme() {
            return new TopologyPageInfoStandardScheme();
        }
    }

    private static class TopologyPageInfoStandardScheme extends StandardScheme<TopologyPageInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TopologyPageInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch(schemeField.id) {
                    case 1:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.id = iprot.readString();
                            struct.set_id_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.set_name_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.uptime_secs = iprot.readI32();
                            struct.set_uptime_secs_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.status = iprot.readString();
                            struct.set_status_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.num_tasks = iprot.readI32();
                            struct.set_num_tasks_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.num_workers = iprot.readI32();
                            struct.set_num_workers_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.num_executors = iprot.readI32();
                            struct.set_num_executors_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.topology_conf = iprot.readString();
                            struct.set_topology_conf_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9:
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map394 = iprot.readMapBegin();
                                struct.id_to_spout_agg_stats = new HashMap<String, ComponentAggregateStats>(2 * _map394.size);
                                String _key395;
                                ComponentAggregateStats _val396;
                                for (int _i397 = 0; _i397 < _map394.size; ++_i397) {
                                    _key395 = iprot.readString();
                                    _val396 = new ComponentAggregateStats();
                                    _val396.read(iprot);
                                    struct.id_to_spout_agg_stats.put(_key395, _val396);
                                }
                                iprot.readMapEnd();
                            }
                            struct.set_id_to_spout_agg_stats_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10:
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map398 = iprot.readMapBegin();
                                struct.id_to_bolt_agg_stats = new HashMap<String, ComponentAggregateStats>(2 * _map398.size);
                                String _key399;
                                ComponentAggregateStats _val400;
                                for (int _i401 = 0; _i401 < _map398.size; ++_i401) {
                                    _key399 = iprot.readString();
                                    _val400 = new ComponentAggregateStats();
                                    _val400.read(iprot);
                                    struct.id_to_bolt_agg_stats.put(_key399, _val400);
                                }
                                iprot.readMapEnd();
                            }
                            struct.set_id_to_bolt_agg_stats_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sched_status = iprot.readString();
                            struct.set_sched_status_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.topology_stats = new TopologyStats();
                            struct.topology_stats.read(iprot);
                            struct.set_topology_stats_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.owner = iprot.readString();
                            struct.set_owner_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.debug_options = new DebugOptions();
                            struct.debug_options.read(iprot);
                            struct.set_debug_options_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 15:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.replication_count = iprot.readI32();
                            struct.set_replication_count_isSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TopologyPageInfo struct) throws org.apache.thrift.TException {
            struct.validate();
            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.id != null) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeString(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.name != null) {
                if (struct.is_set_name()) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.is_set_uptime_secs()) {
                oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
                oprot.writeI32(struct.uptime_secs);
                oprot.writeFieldEnd();
            }
            if (struct.status != null) {
                if (struct.is_set_status()) {
                    oprot.writeFieldBegin(STATUS_FIELD_DESC);
                    oprot.writeString(struct.status);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.is_set_num_tasks()) {
                oprot.writeFieldBegin(NUM_TASKS_FIELD_DESC);
                oprot.writeI32(struct.num_tasks);
                oprot.writeFieldEnd();
            }
            if (struct.is_set_num_workers()) {
                oprot.writeFieldBegin(NUM_WORKERS_FIELD_DESC);
                oprot.writeI32(struct.num_workers);
                oprot.writeFieldEnd();
            }
            if (struct.is_set_num_executors()) {
                oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
                oprot.writeI32(struct.num_executors);
                oprot.writeFieldEnd();
            }
            if (struct.topology_conf != null) {
                if (struct.is_set_topology_conf()) {
                    oprot.writeFieldBegin(TOPOLOGY_CONF_FIELD_DESC);
                    oprot.writeString(struct.topology_conf);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.id_to_spout_agg_stats != null) {
                if (struct.is_set_id_to_spout_agg_stats()) {
                    oprot.writeFieldBegin(ID_TO_SPOUT_AGG_STATS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.id_to_spout_agg_stats.size()));
                        for (Map.Entry<String, ComponentAggregateStats> _iter402 : struct.id_to_spout_agg_stats.entrySet()) {
                            oprot.writeString(_iter402.getKey());
                            _iter402.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.id_to_bolt_agg_stats != null) {
                if (struct.is_set_id_to_bolt_agg_stats()) {
                    oprot.writeFieldBegin(ID_TO_BOLT_AGG_STATS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.id_to_bolt_agg_stats.size()));
                        for (Map.Entry<String, ComponentAggregateStats> _iter403 : struct.id_to_bolt_agg_stats.entrySet()) {
                            oprot.writeString(_iter403.getKey());
                            _iter403.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.sched_status != null) {
                if (struct.is_set_sched_status()) {
                    oprot.writeFieldBegin(SCHED_STATUS_FIELD_DESC);
                    oprot.writeString(struct.sched_status);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.topology_stats != null) {
                if (struct.is_set_topology_stats()) {
                    oprot.writeFieldBegin(TOPOLOGY_STATS_FIELD_DESC);
                    struct.topology_stats.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.owner != null) {
                if (struct.is_set_owner()) {
                    oprot.writeFieldBegin(OWNER_FIELD_DESC);
                    oprot.writeString(struct.owner);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.debug_options != null) {
                if (struct.is_set_debug_options()) {
                    oprot.writeFieldBegin(DEBUG_OPTIONS_FIELD_DESC);
                    struct.debug_options.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.is_set_replication_count()) {
                oprot.writeFieldBegin(REPLICATION_COUNT_FIELD_DESC);
                oprot.writeI32(struct.replication_count);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class TopologyPageInfoTupleSchemeFactory implements SchemeFactory {

        public TopologyPageInfoTupleScheme getScheme() {
            return new TopologyPageInfoTupleScheme();
        }
    }

    private static class TopologyPageInfoTupleScheme extends TupleScheme<TopologyPageInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TopologyPageInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.id);
            BitSet optionals = new BitSet();
            if (struct.is_set_name()) {
                optionals.set(0);
            }
            if (struct.is_set_uptime_secs()) {
                optionals.set(1);
            }
            if (struct.is_set_status()) {
                optionals.set(2);
            }
            if (struct.is_set_num_tasks()) {
                optionals.set(3);
            }
            if (struct.is_set_num_workers()) {
                optionals.set(4);
            }
            if (struct.is_set_num_executors()) {
                optionals.set(5);
            }
            if (struct.is_set_topology_conf()) {
                optionals.set(6);
            }
            if (struct.is_set_id_to_spout_agg_stats()) {
                optionals.set(7);
            }
            if (struct.is_set_id_to_bolt_agg_stats()) {
                optionals.set(8);
            }
            if (struct.is_set_sched_status()) {
                optionals.set(9);
            }
            if (struct.is_set_topology_stats()) {
                optionals.set(10);
            }
            if (struct.is_set_owner()) {
                optionals.set(11);
            }
            if (struct.is_set_debug_options()) {
                optionals.set(12);
            }
            if (struct.is_set_replication_count()) {
                optionals.set(13);
            }
            oprot.writeBitSet(optionals, 14);
            if (struct.is_set_name()) {
                oprot.writeString(struct.name);
            }
            if (struct.is_set_uptime_secs()) {
                oprot.writeI32(struct.uptime_secs);
            }
            if (struct.is_set_status()) {
                oprot.writeString(struct.status);
            }
            if (struct.is_set_num_tasks()) {
                oprot.writeI32(struct.num_tasks);
            }
            if (struct.is_set_num_workers()) {
                oprot.writeI32(struct.num_workers);
            }
            if (struct.is_set_num_executors()) {
                oprot.writeI32(struct.num_executors);
            }
            if (struct.is_set_topology_conf()) {
                oprot.writeString(struct.topology_conf);
            }
            if (struct.is_set_id_to_spout_agg_stats()) {
                {
                    oprot.writeI32(struct.id_to_spout_agg_stats.size());
                    for (Map.Entry<String, ComponentAggregateStats> _iter404 : struct.id_to_spout_agg_stats.entrySet()) {
                        oprot.writeString(_iter404.getKey());
                        _iter404.getValue().write(oprot);
                    }
                }
            }
            if (struct.is_set_id_to_bolt_agg_stats()) {
                {
                    oprot.writeI32(struct.id_to_bolt_agg_stats.size());
                    for (Map.Entry<String, ComponentAggregateStats> _iter405 : struct.id_to_bolt_agg_stats.entrySet()) {
                        oprot.writeString(_iter405.getKey());
                        _iter405.getValue().write(oprot);
                    }
                }
            }
            if (struct.is_set_sched_status()) {
                oprot.writeString(struct.sched_status);
            }
            if (struct.is_set_topology_stats()) {
                struct.topology_stats.write(oprot);
            }
            if (struct.is_set_owner()) {
                oprot.writeString(struct.owner);
            }
            if (struct.is_set_debug_options()) {
                struct.debug_options.write(oprot);
            }
            if (struct.is_set_replication_count()) {
                oprot.writeI32(struct.replication_count);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TopologyPageInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.id = iprot.readString();
            struct.set_id_isSet(true);
            BitSet incoming = iprot.readBitSet(14);
            if (incoming.get(0)) {
                struct.name = iprot.readString();
                struct.set_name_isSet(true);
            }
            if (incoming.get(1)) {
                struct.uptime_secs = iprot.readI32();
                struct.set_uptime_secs_isSet(true);
            }
            if (incoming.get(2)) {
                struct.status = iprot.readString();
                struct.set_status_isSet(true);
            }
            if (incoming.get(3)) {
                struct.num_tasks = iprot.readI32();
                struct.set_num_tasks_isSet(true);
            }
            if (incoming.get(4)) {
                struct.num_workers = iprot.readI32();
                struct.set_num_workers_isSet(true);
            }
            if (incoming.get(5)) {
                struct.num_executors = iprot.readI32();
                struct.set_num_executors_isSet(true);
            }
            if (incoming.get(6)) {
                struct.topology_conf = iprot.readString();
                struct.set_topology_conf_isSet(true);
            }
            if (incoming.get(7)) {
                {
                    org.apache.thrift.protocol.TMap _map406 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.id_to_spout_agg_stats = new HashMap<String, ComponentAggregateStats>(2 * _map406.size);
                    String _key407;
                    ComponentAggregateStats _val408;
                    for (int _i409 = 0; _i409 < _map406.size; ++_i409) {
                        _key407 = iprot.readString();
                        _val408 = new ComponentAggregateStats();
                        _val408.read(iprot);
                        struct.id_to_spout_agg_stats.put(_key407, _val408);
                    }
                }
                struct.set_id_to_spout_agg_stats_isSet(true);
            }
            if (incoming.get(8)) {
                {
                    org.apache.thrift.protocol.TMap _map410 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.id_to_bolt_agg_stats = new HashMap<String, ComponentAggregateStats>(2 * _map410.size);
                    String _key411;
                    ComponentAggregateStats _val412;
                    for (int _i413 = 0; _i413 < _map410.size; ++_i413) {
                        _key411 = iprot.readString();
                        _val412 = new ComponentAggregateStats();
                        _val412.read(iprot);
                        struct.id_to_bolt_agg_stats.put(_key411, _val412);
                    }
                }
                struct.set_id_to_bolt_agg_stats_isSet(true);
            }
            if (incoming.get(9)) {
                struct.sched_status = iprot.readString();
                struct.set_sched_status_isSet(true);
            }
            if (incoming.get(10)) {
                struct.topology_stats = new TopologyStats();
                struct.topology_stats.read(iprot);
                struct.set_topology_stats_isSet(true);
            }
            if (incoming.get(11)) {
                struct.owner = iprot.readString();
                struct.set_owner_isSet(true);
            }
            if (incoming.get(12)) {
                struct.debug_options = new DebugOptions();
                struct.debug_options.read(iprot);
                struct.set_debug_options_isSet(true);
            }
            if (incoming.get(13)) {
                struct.replication_count = iprot.readI32();
                struct.set_replication_count_isSet(true);
            }
        }
    }
}
